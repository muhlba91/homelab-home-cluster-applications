---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-scripts
data:
  plugins.sh: |
    #!/bin/sh
    set -eu

    # install required tools
    apk add --no-cache curl

    # telegraf-output-kinesis-data-firehose
    echo "[telegraf-output-kinesis-data-firehose] retrieving latest version..."
    TELEGRAF_FIREHOSE_VERSION=$(curl -s https://raw.githubusercontent.com/muhlba91/telegraf-output-kinesis-data-firehose/main/latest.sh | sh)

    echo "[telegraf-output-kinesis-data-firehose] wiping old binaries..."
    rm -rf /plugins/bin/firehose
    mkdir /plugins/bin/firehose

    echo "[telegraf-output-kinesis-data-firehose] downloading ${TELEGRAF_FIREHOSE_VERSION}..."
    wget https://github.com/muhlba91/telegraf-output-kinesis-data-firehose/releases/download/${TELEGRAF_FIREHOSE_VERSION}/telegraf-output-kinesis-data-firehose-${TELEGRAF_FIREHOSE_VERSION}-linux-amd64.tar.gz -O /tmp/firehose.tar.gz &> /dev/null
    tar -xzvf /tmp/firehose.tar.gz -C /plugins/bin/firehose/
  grafana.sh: |
    #!/bin/sh
    set -eu

    for datasource in /grafana-datasources/*; do
      name=$(basename ${datasource})
      cp ${datasource} /tmp/datasource-${name}

      sed "s/#TELEGRAF_REMOTE_TOKEN#/${TELEGRAF_REMOTE_TOKEN}/g" -r -i /tmp/datasource-${name}

      sed "s/#AWS_REGION#/${AWS_REGION}/g" -r -i /tmp/datasource-${name}

      sed "s/#GRAFANA_ATHENA_WORKGROUP#/${GRAFANA_ATHENA_WORKGROUP}/g" -r -i /tmp/datasource-${name}
      sed "s/#GRAFANA_GLUE_DATABASE#/${GRAFANA_GLUE_DATABASE}/g" -r -i /tmp/datasource-${name}
      sed "s/#GRAFANA_AWS_ACCESS_KEY_ID#/${GRAFANA_AWS_ACCESS_KEY_ID}/g" -r -i /tmp/datasource-${name}
      sed "s/#GRAFANA_AWS_SECRET_ACCESS_KEY#/${GRAFANA_AWS_SECRET_ACCESS_KEY}/g" -r -i /tmp/datasource-${name}

      kubectl apply -f /tmp/datasource-${name}
    done
  influxdb.sh: |
    #!/bin/bash
    set -eu

    # install required tools
    apk add jq curl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl

    while [[ ! `curl -s ${INFLUX_HOST}` ]]; do
      sleep 1
    done

    # create bucket
    influx bucket create --name home-assistant --description "Home Assistant" --retention 0 || true
    HOME_ASSISTANT_BUCKET=$(influx bucket list --name default --hide-headers --json | jq -r ".[0].id")

    # create user
    influx user create --name home-assistant --password ${INFLUXDB_HOME_ASSISTANT_PASSWORD} || true

    # create token
    HOME_ASSISTANT_TOKEN=$(influx auth list --json | jq -r '.[] | select(.description | match("Home Assistant Telegraf Token")).token')
    if [[ -z "$HOME_ASSISTANT_TOKEN" ]]; then
      HOME_ASSISTANT_TOKEN=$(influx auth create --read-bucket ${HOME_ASSISTANT_BUCKET} --write-bucket ${HOME_ASSISTANT_BUCKET} --description "Home Assistant Telegraf Token" --user home-assistant --json | jq -r ".token")
    fi

    # store token in secret
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      name: influxdb-token
    data:
      token: $(echo -n ${HOME_ASSISTANT_TOKEN} | base64)
    EOF
