---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-scripts
data:
  plugins.sh: |
    #!/bin/sh
    set -eou pipefail

    apk add --no-cache curl

    # telegraf-output-kinesis-data-firehose
    echo "[telegraf-output-kinesis-data-firehose] retrieving latest version..."
    TELEGRAF_FIREHOSE_VERSION=$(curl -s https://raw.githubusercontent.com/muhlba91/telegraf-output-kinesis-data-firehose/main/latest.sh | sh)

    echo "[telegraf-output-kinesis-data-firehose] wiping old binaries..."
    rm -rf /plugins/firehose
    mkdir /plugins/firehose

    echo "[telegraf-output-kinesis-data-firehose] downloading ${TELEGRAF_FIREHOSE_VERSION}..."
    wget https://github.com/muhlba91/telegraf-output-kinesis-data-firehose/releases/download/${TELEGRAF_FIREHOSE_VERSION}/telegraf-output-kinesis-data-firehose-${TELEGRAF_FIREHOSE_VERSION}-linux-amd64.tar.gz -O /tmp/firehose.tar.gz &> /dev/null
    tar -xzvf /tmp/firehose.tar.gz -C /plugins/firehose/
  grafana.sh: |
    #!/bin/sh
    set -eou pipefail

    sed "s/#TELEGRAF_REMOTE_TOKEN#/${TELEGRAF_REMOTE_TOKEN}/g" -r /scripts/grafana-datasource.yml > /tmp/grafana-datasource.yml
    kubectl apply -f /tmp/grafana-datasource.yml
  grafana-datasource.yml: |
    ---
    apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      name: home-assistant-influxdb-grafana
      labels:
        grafana_datasource: "1"
    stringData:
      datasource.yaml: |
        ---
        apiVersion: 1
        datasources:
          - name: influxdb
            type: influxdb
            access: proxy
            url: {{ .Values.influxdb.url }}
            jsonData:
              version: Flux
              organization: {{ .Values.influxdb.organization }}
              defaultBucket: {{ .Values.influxdb.bucket }}
              tlsSkipVerify: true
            secureJsonData:
              token: "#TELEGRAF_REMOTE_TOKEN#"
