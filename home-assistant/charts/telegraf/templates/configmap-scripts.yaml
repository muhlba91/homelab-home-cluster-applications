---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-scripts
data:
  plugins.sh: |
    #!/bin/sh
    set -eu

    apk add --no-cache curl

    # telegraf-output-kinesis-data-firehose
    echo "[telegraf-output-kinesis-data-firehose] retrieving latest version..."
    TELEGRAF_FIREHOSE_VERSION=$(curl -s https://raw.githubusercontent.com/muhlba91/telegraf-output-kinesis-data-firehose/main/latest.sh | sh)

    echo "[telegraf-output-kinesis-data-firehose] wiping old binaries..."
    rm -rf /plugins/firehose
    mkdir /plugins/firehose

    echo "[telegraf-output-kinesis-data-firehose] downloading ${TELEGRAF_FIREHOSE_VERSION}..."
    wget https://github.com/muhlba91/telegraf-output-kinesis-data-firehose/releases/download/${TELEGRAF_FIREHOSE_VERSION}/telegraf-output-kinesis-data-firehose-${TELEGRAF_FIREHOSE_VERSION}-linux-amd64.tar.gz -O /tmp/firehose.tar.gz &> /dev/null
    tar -xzvf /tmp/firehose.tar.gz -C /plugins/firehose/
  grafana.sh: |
    #!/bin/sh
    set -eu

    for datasource in /grafana-datasources/*; do
      name=$(basename ${datasource})
      cp ${datasource} /tmp/datasource-${name}

      sed "s/#TELEGRAF_REMOTE_TOKEN#/${TELEGRAF_REMOTE_TOKEN}/g" -r -i /tmp/datasource-${name}

      sed "s/#AWS_REGION#/${AWS_REGION}/g" -r -i /tmp/datasource-${name}

      sed "s/#GRAFANA_ATHENA_WORKGROUP#/${GRAFANA_ATHENA_WORKGROUP}/g" -r -i /tmp/datasource-${name}
      sed "s/#GRAFANA_GLUE_DATABASE#/${GRAFANA_GLUE_DATABASE}/g" -r -i /tmp/datasource-${name}
      sed "s/#GRAFANA_AWS_ACCESS_KEY_ID#/${GRAFANA_AWS_ACCESS_KEY_ID}/g" -r -i /tmp/datasource-${name}
      sed "s/#GRAFANA_AWS_SECRET_ACCESS_KEY#/${GRAFANA_AWS_SECRET_ACCESS_KEY}/g" -r -i /tmp/datasource-${name}

      kubectl apply -f /tmp/datasource-${name}
    done
