---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-red-scripts
data:
  backup_restore.sh: |
    #!/bin/sh
    set -euo pipefail

    #region global configuration
    URL="http://{{ index .Values "app-template" "global" "fullnameOverride" }}:1880"
    S3_ASSETS_BUCKET_PATH="${S3_ASSETS_BUCKET}/node-red"
    #endregion

    #region functions
    function token() {
      echo "retrieving JWT token..."

      # get JWT token
      JWT_TOKEN=$(curl -s -X POST ${OIDC_TOKEN_URL} -F "username=${OIDC_USERNAME}" -F "password=${OIDC_AUTH_TOKEN}" -F "grant_type=client_credentials" -F "client_id=${NODE_RED_OIDC_CLIENT_ID}" -H "Content-Type: application/json" -H "Referer: ${OIDC_REFERER}" | jq -c '.access_token' -r)
    }

    function check() {
      echo "checking for data..."

      # check for data
      token
      homelab-node-red-backup check -e ${URL} -jwt "${JWT_TOKEN}" 2> /dev/null
      if [[ $? -eq 0 ]]; then
        DATA_EXISTS="true"
      else
        DATA_EXISTS="false"
      fi

      echo "evaluated data exists: ${DATA_EXISTS}"
    }

    function backup() {
      echo "backing up..."

      # create backup
      token
      homelab-node-red-backup backup -e ${URL} -jwt "${JWT_TOKEN}" -f backup.json

      # upload backup to S3
      s3cmd --access_key=${GCS_ACCESS_KEY_ID} --secret_key="${GCS_SECRET_ACCESS_KEY}" --host="https://storage.googleapis.com" --host-bucket="https://storage.googleapis.com" sync backup.json s3://${S3_ASSETS_BUCKET_PATH}/

      echo "backed up and uploaded to s3://${S3_ASSETS_BUCKET_PATH}/backup.json."
    }

    function restore() {
      echo "restoring from s3://${S3_ASSETS_BUCKET_PATH}/backup.json..."

      # download backup from S3
      s3cmd --access_key=${GCS_ACCESS_KEY_ID} --secret_key="${GCS_SECRET_ACCESS_KEY}" --host="https://storage.googleapis.com" --host-bucket="https://storage.googleapis.com" --recursive --force get s3://${S3_ASSETS_BUCKET_PATH}/backup.json ./

      # restore backup
      token
      homelab-node-red-backup restore -e ${URL} -jwt "${JWT_TOKEN}" -f backup.json
    }
    #endregion

    #region install packages
    apk --no-cache add jq curl
    pip install homelab-node-red-backup
    #endregion

    #region log configuration
    echo "using endpoint: ${URL}"
    echo "using S3 bucket and path: ${S3_ASSETS_BUCKET_PATH}"
    #endregion

    #region wait for API readiness
    echo "waiting for API readiness..."
    while [[ ! `curl -s ${URL}/auth-enabled -H "Accept: application/json"` ]]; do
      sleep 1
    done
    echo "API is ready."
    #endregion

    #region data check
    check
    #endregion

    #region backup or restore
    # if check returns true, we need to perform a backup
    # otherwise, we have a new (empty) setup and can restore
    if [[ "${DATA_EXISTS}" == "true" ]]; then
      backup
    else
      restore
    fi
    #endregion
